cmake_minimum_required (VERSION 3.23)
project                (vapor)

set (PRESET_FEATURE_COLLECTIONS ON)
set (PRESET_FEATURE_LIBC        ON)

if   (UNIX AND NOT APPLE)
    if   (NOT EXISTS /usr/bin/git)
        message ("Git is required to initialize project.")
        message ("Install Git from your package manager.")
        message (SEND_ERROR)
    endif()
elseif (WIN32)
    if   (NOT EXISTS "C:\\Program Files\\Git\\bin\\git.exe")
        message ("Git is required to initialize project.")
        message ("Install Git from your package manager.")
        message (SEND_ERROR)
    endif()
endif  ()

if   (NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/lib/asterisk)
    execute_process(COMMAND git clone https://github.com/gunnerDgd/asterisk WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/lib)
endif()

if   (NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/lib/crisp)
    execute_process(COMMAND git clone https://github.com/gunnerDgd/crisp    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/lib)
endif()

if     (PRESET_ARCH_X86_64)
    add_compile_definitions(PRESET_ARCH_X86_64)
    add_compile_definitions(PRESET_ARCH_BIT=64)
    add_compile_definitions(PRESET_ARCH_ENDIAN_LITTLE)


    set(PRESET_ARCH_ENDIAN_LITTLE on)
    set(PRESET_ARCH_ENDIAN_BIG    off)
    set(PRESET_ARCH_X86_64        on)
    set(PRESET_ARCH_BIT           64)
    if (NOT ${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${CMAKE_SOURCE_DIR})
        set(PRESET_ARCH_ENDIAN_LITTLE on  PARENT_SCOPE)
        set(PRESET_ARCH_ENDIAN_BIG    off PARENT_SCOPE)
        set(PRESET_ARCH_X86_64        on  PARENT_SCOPE)
        set(PRESET_ARCH_BIT           64  PARENT_SCOPE)
    endif()
elseif (PRESET_ARCH_X86)
    add_compile_definitions(PRESET_ARCH_X86)
    add_compile_definitions(PRESET_ARCH_BIT=32)
    add_compile_definitions(PRESET_ARCH_ENDIAN_LITTLE)

    set(PRESET_ARCH_ENDIAN_LITTLE on)
    set(PRESET_ARCH_ENDIAN_BIG    off)
    set(PRESET_ARCH_X86           on)
    set(PRESET_ARCH_BIT           32)
    if (NOT ${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${CMAKE_SOURCE_DIR})
        set(PRESET_ARCH_ENDIAN_LITTLE on  PARENT_SCOPE)
        set(PRESET_ARCH_ENDIAN_BIG    off PARENT_SCOPE)
        set(PRESET_ARCH_X86           on  PARENT_SCOPE)
        set(PRESET_ARCH_BIT           32  PARENT_SCOPE)
    endif()
endif()

if     ("${CMAKE_C_COMPILER_ID}" MATCHES  "Clang")
    add_compile_definitions(PRESET_COMPILER_CLANG)
    add_compile_definitions(PRESET_CALL_SYSV)

    set(PRESET_COMPILER_CLANG on)
    set(PRESET_CALL_SYSV      on)
    if (NOT ${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${CMAKE_SOURCE_DIR})
        set(PRESET_COMPILER_CLANG on PARENT_SCOPE)
        set(PRESET_CALL_SYSV      on PARENT_SCOPE)
    endif()
elseif ("${CMAKE_C_COMPILER_ID}" STREQUAL "GNU")
    add_compile_definitions(PRESET_COMPILER_GCC)
    add_compile_definitions(PRESET_CALL_SYSV)

    set(PRESET_COMPILER_GCC on)
    set(PRESET_CALL_SYSV    on)
    if (NOT ${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${CMAKE_SOURCE_DIR})
        set(PRESET_COMPILER_GCC on PARENT_SCOPE)
        set(PRESET_CALL_SYSV    on PARENT_SCOPE)
    endif()
elseif ("${CMAKE_C_COMPILER_ID}" STREQUAL "Intel")
    add_compile_definitions(PRESET_COMPILER_INTEL)
    add_compile_definitions(PRESET_CALL_SYSV)

    set(PRESET_COMPILER_INTEL on)
    set(PRESET_CALL_SYSV      on)
    if (NOT ${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${CMAKE_SOURCE_DIR})
        set(PRESET_COMPILER_INTEL on PARENT_SCOPE)
        set(PRESET_CALL_SYSV      on PARENT_SCOPE)
    endif()
elseif ("${CMAKE_C_COMPILER_ID}" STREQUAL "MSVC")
    add_compile_definitions(PRESET_COMPILER_MSVC)
    add_compile_definitions(PRESET_CALL_VECTORCALL)

    set(PRESET_COMPILER_MSVC   on)
    set(PRESET_CALL_VECTORCALL on)
    if (NOT ${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${CMAKE_SOURCE_DIR})
        set(PRESET_COMPILER_MSVC   on PARENT_SCOPE)
        set(PRESET_CALL_VECTORCALL on PARENT_SCOPE)
    endif()
endif()

if    (WIN32)
    add_compile_definitions(PRESET_WIN32)
        set(PRESET_WIN32 on)
    if (NOT ${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${CMAKE_SOURCE_DIR})
        set(PRESET_WIN32 on PARENT_SCOPE)
    endif()
elseif(UNIX AND NOT APPLE)
    add_compile_definitions(PRESET_LINUX)
        set(PRESET_LINUX on)
    if (NOT ${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${CMAKE_SOURCE_DIR})
        set(PRESET_LINUX on PARENT_SCOPE)
    endif()
endif ()

add_subdirectory(${CMAKE_SOURCE_DIR}/lib/crisp/src)
add_subdirectory(${CMAKE_SOURCE_DIR}/lib/asterisk/src)

include_directories(lib/crisp/include)
include_directories(lib/asterisk/include)

add_subdirectory   (src)
add_subdirectory   (examples)